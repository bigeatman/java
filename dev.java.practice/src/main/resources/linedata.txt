왜 effectively final이어야 하는가?
람다 표현식에서 외부 변수를 참조할 수 있지만, 그 변수를 변경할 수 없도록 강제하는 것은 함수형 프로그래밍의 특성에 따른 것입니다. 
람다에서 외부 변수를 변경하면, 코드의 예측 가능성을 떨어뜨리고, 불확실한 상태를 초래할 수 있습니다. 
즉, 람다 외부의 변수를 변경할 수 없도록 하면 프로그램의 상태를 일관되게 유지할 수 있습니다.

단일스레드에서도 문제가 될 수 있는 이유:
람다 표현식은 내부적으로 익명 클래스처럼 동작하며, 해당 외부 변수의 값을 캡처하여 사용합니다. 
만약 외부 변수를 수정할 수 있다면, 불안정한 상태가 될 수 있으며, 예를 들어 값을 업데이트할 때 예상하지 못한 결과가 나올 수 있습니다.
effectively final 규칙을 적용하는 것은, 람다 표현식이 안전하게 상태를 공유할 수 있도록 보장하려는 목적이기도 합니다. 
단일스레드 환경에서도 이런 규칙은 프로그램의 안정성을 높이는 데 기여합니다.
결국 멀티스레딩 환경에서만 문제가 발생하는 것이 아니라, 일반적인 코드의 안정성을 위해 람다에서 외부 변수를 변경할 수 없도록 제한하는 것입니다.